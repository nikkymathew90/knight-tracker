{"version":3,"sources":["Board/nextMoves.js","Board/Board.js","App.js","serviceWorker.js","index.js"],"names":["NextMoves","props","onClick","clicked","disabled","move","visited","next_x","next_y","Board","useState","boardSize","setBoardSize","x","y","startingCord","setstartingCord","setVisited","possibleMoves","setPossibleMoves","useEffect","isValidStart","moves","i","x_moves","y_moves","checkVisited","push","getValidMoves","key","setStartingCordHandler","e","newCord","target","name","value","Fragment","className","type","onChange","event","length","map","allMoves","updateStartingCord","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bce7692a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst NextMoves = props => {\n  return (\n    <button onClick={props.clicked} disabled={props.move.visited}>\n      x: {props.move.next_x}, y: {props.move.next_y}\n    </button>\n  );\n};\n\nexport default NextMoves;\n","import React, { useState, useEffect } from \"react\";\nimport NextMoves from \"./nextMoves\";\n\nconst Board = () => {\n  const [boardSize, setBoardSize] = useState(8);\n  const [startingCord, setstartingCord] = useState({ x: 8, y: 1 });\n  const [visited, setVisited] = useState([{ x: 1, y: 1 }]);\n  const [possibleMoves, setPossibleMoves] = useState([]);\n\n  useEffect(() => {\n    getValidMoves();\n  }, [boardSize, startingCord]);\n\n  const x_moves = [2, 1, -1, -2, -2, -1, 1, 2];\n  const y_moves = [1, 2, 2, 1, -1, -2, -2, -1];\n\n  function getValidMoves() {\n    const { x, y } = startingCord;\n    if (isValidStart(x, y)) {\n      const moves = [];\n      let visited;\n\n      for (let i = 0; i < 8; i++) {\n        const next_x = x + x_moves[i];\n        const next_y = y + y_moves[i];\n        if (\n          next_x >= 1 &&\n          next_x <= boardSize &&\n          next_y >= 1 &&\n          next_y <= boardSize\n        ) {\n          visited = checkVisited(next_x, next_y) ? true : false;\n          moves.push({ next_x, next_y, visited: visited });\n        }\n        setPossibleMoves(moves);\n      }\n    }\n  }\n\n  function checkVisited(x, y) {\n    for (let key in visited) {\n      if (visited[key].x === x && visited[key].y === y) {\n        return true;\n      }\n    }\n  }\n\n  function isValidStart(x, y) {\n    return x <= boardSize && y <= boardSize ? true : false;\n  }\n\n  function boardSizeHandler(event) {\n    setBoardSize(event.target.value);\n  }\n\n  function setStartingCordHandler(e) {\n    const newCord = { ...startingCord };\n    e.target.name === \"input_x\"\n      ? (newCord.x = +e.target.value)\n      : (newCord.y = +e.target.value);\n    setstartingCord(newCord);\n  }\n\n  function updateStartingCord({ next_x, next_y }) {\n    const newCord = { x: next_x, y: next_y, visited: true };\n    setstartingCord(newCord);\n    const allMoves = [...visited];\n    allMoves.push(newCord);\n    setVisited(allMoves);\n  }\n\n  return (\n    <React.Fragment>\n      <div className=\"Board\">\n        <div>\n          <label> Board Size : </label>\n          <input\n            type=\"text\"\n            name=\"size\"\n            value={boardSize}\n            onChange={boardSizeHandler}\n          />\n        </div>\n        <div>\n          <label> X coordinate : </label>\n          <input\n            type=\"text\"\n            name=\"input_x\"\n            value={startingCord.x}\n            onChange={setStartingCordHandler}\n          />\n        </div>\n        <div>\n          <label>Y coordinate : </label>\n          <input\n            type=\"text\"\n            name=\"input_y\"\n            value={startingCord.y}\n            onChange={setStartingCordHandler}\n          />\n        </div>\n      </div>\n      <div className=\"moves\">\n        <p>Possible Moves</p>\n        {possibleMoves.length ? (\n          possibleMoves.map((move, i) => {\n            return (\n              <NextMoves\n                move={move}\n                key={i}\n                clicked={() => {\n                  updateStartingCord(move);\n                }}\n              />\n            );\n          })\n        ) : (\n          <p>No Possible Move. Starting Coordinates outside board Size</p>\n        )}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./Board/Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}